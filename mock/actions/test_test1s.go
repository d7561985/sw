package actions

import (
	"github.com/d7561985/sw/mock/models"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Test1)
// DB Table: Plural (test1s)
// Resource: Plural (TestTest1s)
// Path: Plural (/test/test1s)
// View Template Folder: Plural (/templates/test/test1s/)

// TestTest1sResource is the resource for the Test1 model
type TestTest1sResource struct {
	buffalo.Resource
}

// List gets all Test1s. This function is mapped to the path
// GET /test/test1s
func (v TestTest1sResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	test1s := &models.Test1s{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Test1s from the DB
	if err := q.All(test1s); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, test1s))
}

// Show gets the data for one Test1. This function is mapped to
// the path GET /test/test1s/{test_test1_id}
func (v TestTest1sResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Test1
	test1 := &models.Test1{}

	// To find the Test1 the parameter test_test1_id is used.
	if err := tx.Find(test1, c.Param("test_test1_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, test1))
}

// New renders the form for creating a new Test1.
// This function is mapped to the path GET /test/test1s/new
func (v TestTest1sResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Test1{}))
}

// Create adds a Test1 to the DB. This function is mapped to the
// path POST /test/test1s
func (v TestTest1sResource) Create(c buffalo.Context) error {
	// Allocate an empty Test1
	test1 := &models.Test1{}

	// Bind test1 to the html form elements
	if err := c.Bind(test1); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(test1)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, test1))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Test1 was created successfully")

	// and redirect to the test/test1s index page
	return c.Render(201, r.Auto(c, test1))
}

// Edit renders a edit form for a Test1. This function is
// mapped to the path GET /test/test1s/{test_test1_id}/edit
func (v TestTest1sResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Test1
	test1 := &models.Test1{}

	if err := tx.Find(test1, c.Param("test_test1_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, test1))
}

// Update changes a Test1 in the DB. This function is mapped to
// the path PUT /test/test1s/{test_test1_id}
func (v TestTest1sResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Test1
	test1 := &models.Test1{}

	if err := tx.Find(test1, c.Param("test_test1_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Test1 to the html form elements
	if err := c.Bind(test1); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(test1)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, test1))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Test1 was updated successfully")

	// and redirect to the test/test1s index page
	return c.Render(200, r.Auto(c, test1))
}

// Destroy deletes a Test1 from the DB. This function is mapped
// to the path DELETE /test/test1s/{test_test1_id}
func (v TestTest1sResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Test1
	test1 := &models.Test1{}

	// To find the Test1 the parameter test_test1_id is used.
	if err := tx.Find(test1, c.Param("test_test1_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(test1); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Test1 was destroyed successfully")

	// Redirect to the test/test1s index page
	return c.Render(200, r.Auto(c, test1))
}
